# -*- coding: utf-8 -*-
"""diabetes_simulator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_lhuHg1tdIqgy_iX6m-kTKsQqgvarql-
"""

import matplotlib.pyplot as plt
from random import uniform

# Step 1: Get patient info
print("👋 Welcome to the Diabetes Digital Twin Simulator!\n")

age = int(input("Enter patient's age (years): "))
weight = float(input("Enter patient's weight (lbs): "))
exercise = float(input("Enter minutes of exercise per day: "))
med_dose = float(input("Enter medication dose (units, e.g., 0 to 100): "))

# Warn if medication dose is too low or too high
if med_dose < 10:
    print("⚠️ Warning: Very low medication dose. Glucose may stay dangerously high.")
elif med_dose > 100:
    print("⚠️ Warning: Medication dose is very high. Consult a doctor before using such a strong dose.")

patient = {
    'age': age,
    'weight': weight,
    'exercise_minutes_per_day': exercise,
    'medication_dose': med_dose
}

# Step 2: Simulate glucose
def simulate_glucose(patient, days=30):
    glucose_levels = []
    high_risk_days = []
    glucose = 160  # starting level (mg/dL)

    for day in range(days):
        # Treatment effects
        glucose -= patient['exercise_minutes_per_day'] * 0.1
        glucose -= patient['medication_dose'] * 0.05

        # Random variation
        glucose += uniform(-5, 5)

        # Keep within a safe minimum
        glucose = max(glucose, 70)

        glucose_levels.append(glucose)

        # Flag risky days (glucose above 140)
        if glucose > 140:
            high_risk_days.append(day + 1)

    return glucose_levels, high_risk_days

# Step 3: Run simulation
days = 30
glucose_data, risk_days = simulate_glucose(patient, days)

# Step 4: Display chart
plt.figure(figsize=(10,5))
plt.plot(range(1, days+1), glucose_data, marker='o', color='blue', label='Glucose Level')
plt.axhline(140, color='red', linestyle='--', label='High Threshold')
plt.axhline(90, color='green', linestyle='--', label='Healthy Range')
plt.title("📈 Blood Glucose Simulation (30 Days)", fontsize=14)
plt.xlabel("Day", fontsize=12)
plt.ylabel("Glucose Level (mg/dL)", fontsize=12)
plt.legend()
plt.grid(True)

# Mark risky points
for day in risk_days:
    plt.plot(day, glucose_data[day - 1], 'ro')  # red dot for risky day

plt.tight_layout()
plt.show()

# Step 5: Show summary
print(f"\n📝 Summary:")
print(f"Patient Age: {age} | Weight: {weight}kg | Medication Dose: {med_dose} units")
print(f"⚠️ Days with high-risk glucose levels (>140 mg/dL): {risk_days if risk_days else 'None'}")
print("✅ Simulation complete.")